#!/usr/bin/env python
#Go from the positives narrowpeak file and background bed regions to
# gc-matched .fa files for the positives and negatives
#Partially based on code written by Eva Prakash
from __future__ import division, print_function, absolute_import
import configparser
import argparse
import os
from vakai import util


def generate_pos_and_neg_fasta(cfg):
    POS_NARROWPEAK = cfg['DEFAULT']['POS_NARROWPEAK']
    BG_NARROWPEAK = cfg['DEFAULT']['BG_NARROWPEAK']
    TARGET_MASTER_DIR = cfg['DEFAULT']['TARGET_MASTER_DIR'] 
    TARGET_SEQUENCES_DIR = TARGET_MASTER_DIR + "/sequences"
    REGION_SIZE = int(cfg['DEFAULT']['REGION_SIZE'])
    GENOME_FASTA = cfg['DEFAULT']['GENOME_FASTA']
    CHROMSIZES = cfg['DEFAULT']['CHROMSIZES']
    PIPELINE_TYPE = cfg['DEFAULT']['PIPELINE_TYPE']
    assert PIPELINE_TYPE=="chip" or PIPELINE_TYPE=="dnase"
    if (PIPELINE_TYPE=="chip"):
        PEAKS_AND_BG_NARROWPEAK=cfg['DEFAULT']['PEAKS_AND_BG_NARROWPEAK']

    util.create_dir(TARGET_MASTER_DIR, mustcreate=False)
    util.create_dir(TARGET_SEQUENCES_DIR, mustcreate=False)

    #Go from narrowpeak to fixed-size regions around the summit for pos & bg

    pos_bed = TARGET_SEQUENCES_DIR+'/prefilt_positives.bed.gz'
    util.expand_region_around_narrowpeak_summit(
                narrowpeak_file=POS_NARROWPEAK,
                region_size=REGION_SIZE,
                output_file=pos_bed,
                chromsizes_file=CHROMSIZES)
    if (PIPELINE_TYPE=="chip"):
        peaks_and_bg_bed = TARGET_SEQUENCES_DIR+"/peaks_and_bg.bed.gz"
        util.expand_region_around_narrowpeak_summit(
                narrowpeak_file=PEAKS_AND_BG_NARROWPEAK,
                region_size=REGION_SIZE,
                output_file=peaks_and_bg_bed,
                chromsizes_file=CHROMSIZES)
    bg_bed = TARGET_SEQUENCES_DIR + '/bg.bed.gz'
    util.expand_region_around_narrowpeak_summit(
                narrowpeak_file=BG_NARROWPEAK,
                region_size=REGION_SIZE,
                output_file=bg_bed,
                chromsizes_file=CHROMSIZES)

    #kick out regions in the bg set that overlap the positive set
    if (PIPELINE_TYPE=="chip"):
        file_for_pos_exclusion_bed=peaks_and_bg_bed
    elif (PIPELINE_TYPE=="dnase"):
        file_for_pos_exclusion_bed=pos_bed
    bgminuspos_bed = TARGET_SEQUENCES_DIR + '/bg_minus_pos.bed.gz'
    os.system('intersectBed -v -a ' + bg_bed
               + ' -b '+ file_for_pos_exclusion_bed
               + ' -wa | gzip -c > ' + bgminuspos_bed)

    #get the fasta sequences associated with the positive and negative sets
    #note that the positives will be subsequently filtered to kick out
    # entries with nonstandard bases
    prefilt_pos_fasta = pos_bed+".fa"
    util.get_fasta(genome_fasta=GENOME_FASTA,
                   bed_file=pos_bed,
                   output_fasta=prefilt_pos_fasta)
    bgminuspos_fasta = bgminuspos_bed+".fa"
    util.get_fasta(genome_fasta=GENOME_FASTA,
                   bed_file=bgminuspos_bed,
                   output_fasta=bgminuspos_fasta)

    positives_fasta = TARGET_SEQUENCES_DIR + '/positives.fa'
    util.write_fasta(
        key_and_seq_pairs=util.load_fasta(prefilt_pos_fasta,
                                          skip_nonstandard=True),
        output_fasta=positives_fasta) 
    negatives_fasta = TARGET_SEQUENCES_DIR + '/negatives.fa'
    util.write_fasta(
        key_and_seq_pairs=util.load_fasta(bgminuspos_fasta,
                                          skip_nonstandard=True),
        output_fasta=negatives_fasta) 


if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("configfile")
    args = parser.parse_args()
    cfg = configparser.ConfigParser() 
    cfg.read(args.configfile)
    generate_pos_and_neg_fasta(cfg)
