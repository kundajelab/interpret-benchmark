#!/usr/bin/env python
from __future__ import division, print_function, absolute_import
import argparse
import configparser
import numpy as np
from vakai import util, dinuc_shuffle


rc_map = {'A': 'T', 'a':'t',
          'C': 'G', 'c': 'g',
          'G': 'C', 'g': 'c',
          'T': 'A', 't': 'a'}


def take_rc(seq):
    return "".join(rc_map[x] for x in seq[::-1])
    

MotifHit = namedtuple('MotifHit', ['motifid', 'seqid', 'start', 'stop',
                                   'onposstrand', 'score', 'pval',
                                   'qval', 'matchedseq'])


def motifhit_to_str(motifhit):
    return (motifhit.motifid+"_"+"pos-"+str(motifhit.onposstrand)
            +"_"+str(motifhit.start)+"-"+str(motifhit.end)
            +"_"+str(motifhit.pval)+"_"+str(motifhit.matchedseq))


def read_fimo(file_handle):
    seqid_to_hits = defaultdict(list)
    for line_idx,line in enumerate(file_handle):
        if (line_idx > 1):
            if (hasattr(line, 'decode')):
                line = line.decode('utf-8')
            line = line.rstrip()
            arr = line.split("\t")
            motifid = arr[0]
            seqid = arr[1]
            start = int(arr[2])-1
            stop = int(arr[3])
            assert arr[4]=="+" or arr[4]=="-"
            onposstrand = True if (arr[4]=="+") else False
            score = float(arr[5])
            pval = float(arr[6])
            qval = float(arr[7])
            matchedseq = (arr[8] if onposstrand else take_rc(arr[8]))
            seqid_to_hits[seqid].append(
                MotifHit(motifid=motifid, seqid=seqid,
                         start=start, stop=stop,
                         onposstrand=onposstrand,
                         score=score, pval=pval,
                         qval=qval, matchedseq=matchedseq))
    return seqid_to_hits


def make_motifid_to_hits(seqid_to_hits, pos_seqids_set, neg_seqids_set):
    motifid_to_poshits = defaultdict(list)
    motifid_to_neghits = defaultdict(list)
    for seqid in seqid_to_hits:
        hits = seqid_to_hits[seqid]
        for motif in hits:
            if (seqid in pos_seqids_set):
                motifid_to_poshits[motif.motifid].append(motif)
            else:
                assert seqid in neg_seqids_set
                motifid_to_neghits[motif.motifid].append(motif)
    return motifid_to_poshits, motifid_to_neghits


def generate_simulated_pos_and_neg(cfg):
    seqid_to_hits = read_fimo(util.open_fh(cfg['DEFAULT']['FIMO_FILE']))
    pos_idsandseqs = util.load_fasta(cfg['DEFAULT']['POSITIVES_FASTA'])
    neg_idsandseqs = util.load_fasta(cfg['DEFAULT']['NEGATIVES_FASTA'])
    motifid_to_poshits, motifid_to_neghits = make_motifid_to_hits(
        seqid_to_hits=seqid_to_hits,
        pos_seqids_set=set([x[0] for x in pos_idsandseqs]),
        neg_seqids_set=set([x[0] for x in neg_idsandseqs]))

    motifids = sorted(motifid_to_poshits.keys())
    passing_motif_ids = set()
    REGION_SIZE = int(cfg['DEFAULT']['REGION_SIZE'])
    MIN_ENRICHMENT_SCORE = float(cfg['DEFAULT']['MIN_ENRICHMENT_SCORE'])
    MIN_POS_HITS = int(cfg['DEFAULT']['MIN_POS_HITS'])

    for motifid in motifids:
        pos_hits = motifid_to_poshits[motifid]
        neg_hits = motifid_to_neghits[motifid]
        half_region_size = REGION_SIZE/2
        total_weighted_pos_hits = sum([(half_region_size
                                        - abs(half_region_size-x.start))
                                       for x in pos_hits])
        total_weighted_neg_hits = sum([(half_region_size
                                        - abs(half_region_size-x.start))
                                       for x in neg_hits])
        enrichment_score = ((total_weighted_pos_hits/len(pos_idsandseqs))/
                             (total_weighted_neg_hits/len(neg_idsandseqs)))
        #print(motifid, len(pos_hits), enrichment_score)
        if (len(pos_hits) >= MIN_POS_HITS
            and enrichment_score >= MIN_ENRICHMENT_SCORE):
            passing_motif_ids.add(motifid)
            print(motifid, len(pos_hits), enrichment_score)

    POS_SIM_OUTFILE = cfg['DEFAULT']['POS_SIM_OUTFILE']
    NEG_SIM_OUTFILE = cfg['DEFAULT']['NEG_SIM_OUTFILE']

    rng = np.random.RandomState(1234)

    #count the number of positions occupied by the motifs
    pos_occupied_positions = np.zeros((len(pos_idsandseqs), region_size))
    pos_sim_outfh = open(POS_SIM_OUTFILE, 'w')
    pos_sim_outfh.write("seqid\tsequences\tmotifhits\n")
    for pos_idx,(pos_seq_id, orig_pos_seq) in enumerate(pos_idsandseqs):
        dn_shuffled_bg = [x for x in
                          dinuc_shuffle.dinuc_shuffle(s=orig_pos_seq, rng=rng)]
        motif_hits_in_seq = seqid_to_hits[pos_seq_id]
        for motif_hit in motif_hits_in_seq:
            assert (motif_hit.matchedseq
                    ==orig_pos_seq[motif_hit.start:motif_hit.stop])
            dn_shuffled_bg[motif_hit.start:motif_hit.stop] =\
                motif_hit.matchedseq
            pos_occupied_positions[pos_idx,motif_hit.start:motif_hit.stop] = 1
        simulated_seq = "".join(dn_shuffled_bg)
        pos_sim_outfh.write(pos_seq_id+"\t"+simulated_seq+"\t"+
                          (",".join([str(x) for x in motif_hits_in_seq]))+"\n") 
     
    neg_occupied_positions = np.zeros((len(neg_idsandseqs), region_size))
    neg_sim_outfh = open(NEG_SIM_OUTFILE, 'w')
    neg_sim_outfh.write("seqid\tsequences\tmotifhits\n")
    for neg_idx,(neg_seq_id,orig_neg_seq) in enumerate(neg_idsandseqs):
        random_neg_seq = neg_idsandseqs[rng.choice(a=len(neg_idsandseqs))][0]
        dn_shuffled_bg = [x for x in dinuc_shuffle.dinuc_shuffle(
                          s=random_neg_seq, rng=rng)]
        motif_hits_in_seq = seqid_to_hits[neg_seq_id]
        for motif_hit in motif_hits_in_seq:
            assert (motif_hit.matchedseq
                    ==orig_neg_seq[motif_hit.start:motif_hit.stop])
            dn_shuffled_bg[motif_hit.start:motif_hit.stop] = motif_hit.matchedseq
            neg_occupied_positions[neg_idx,motif_hit.start:motif_hit.stop] = 1
        simulated_seq = "".join(dn_shuffled_bg)
        neg_sim_outfh.write(neg_seq_id+"\t"+simulated_seq+"\t"+
                          (",".join([str(x) for x in motif_hits_in_seq]))+"\n") 


if __name__=='__main__':
    parser = argparse.ArgumentParser() 
    parser.add_argument("configfile")
    args = parser.parse_args()
    cfg = configparser.ConfigParser() 
    cfg.read(args.configfile)
    generate_simulated_pos_and_neg(cfg)
